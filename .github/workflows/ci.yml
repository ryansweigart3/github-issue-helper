name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install build twine
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports || true
      continue-on-error: true  # Don't fail CI for type errors initially

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Check code formatting with black
      run: |
        black --check --diff src tests

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src tests

  package-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, security, code-quality, package-build]
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Install from wheel
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    - name: Test CLI installation
      run: |
        tissue --help
        tissue --version

    - name: Test CSV parsing functionality
      run: |
        # Create test CSV
        echo "issue title,description,assignee,label" > test.csv
        echo "Test Issue,Test Description,testuser,bug" >> test.csv
        
        # Test CSV parsing (will fail at GitHub connection, which is expected)
        python -c "
        from src.csv_parser import CSVParser
        parser = CSVParser('test.csv')
        issues = parser.parse()
        assert len(issues) == 1
        assert issues[0].title == 'Test Issue'
        print('✅ CSV parsing works correctly')
        "

    - name: Test import functionality
      run: |
        python -c "
        from src.csv_parser import CSVParser, IssueData
        from src.github_client import GitHubClient, IssueCreationResult, BatchResult
        print('✅ All imports working correctly')
        "

  multi-platform-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.11']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"

    - name: Run core tests
      run: |
        pytest tests/test_csv_parser.py -v

    - name: Test CLI basic functionality
      shell: bash
      run: |
        python -m src.main --help

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check dependency conflicts
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
        # Check for dependency conflicts
        pip install -e .
        pip check
        
        echo "✅ No dependency conflicts found"

    - name: Verify PyGithub installation
      run: |
        python -c "
        try:
            from github import Github, GithubException
            print('✅ PyGithub imported successfully')
        except ImportError as e:
            print(f'❌ PyGithub import failed: {e}')
            exit(1)
        "

  examples-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Validate example CSV files
      run: |
        python -c "
        import os
        from src.csv_parser import CSVParser
        
        example_files = [
            'examples/basic_issues.csv',
            'examples/flexible_format.csv', 
            'examples/edge_cases.csv',
            'examples/bug_reports.csv',
            'examples/feature_requests.csv'
        ]
        
        for file_path in example_files:
            if os.path.exists(file_path):
                try:
                    parser = CSVParser(file_path)
                    issues = parser.parse()
                    print(f'✅ {file_path}: {len(issues)} issues parsed successfully')
                except Exception as e:
                    print(f'❌ {file_path}: Failed to parse - {e}')
                    exit(1)
            else:
                print(f'⚠️  {file_path}: File not found')
        
        print('✅ All example CSV files validated successfully')
        "

  status-check:
    runs-on: ubuntu-latest
    needs: [test, security, code-quality, package-build, integration-test, multi-platform-test, dependency-check, examples-validation]
    if: always()
    steps:
    - name: Check overall status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" && 
              "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.package-build.result }}" == "success" ]]; then
          echo "✅ All critical checks passed!"
        else
          echo "❌ Some critical checks failed"
          exit 1
        fi
